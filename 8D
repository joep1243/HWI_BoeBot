import TI.BoeBot;
import TI.PWM;
import TI.Servo;

public class RobotMain {
    static Servo sLinks = new Servo(12);
    static Servo sRechts = new Servo(13);

    public static void main(String[] args) {
        // Even wachten zodat ik de Boebot op de grond kan zetten
        BoeBot.wait(5000);

        while(true) {
            // Functie aanspreken met verschillende waardes
            turnDegrees(90, 25);
            turnDegrees(270, 75);
            turnDegrees(60, 50);
        }
    }

    public static void turnDegrees(int degrees, int turningSpeed) {
        // kijken of het getal groter is dan 0
        if (turningSpeed > 0){
            // Tijd om te draaien bereken
            int timePerDegree = 400 / turningSpeed;

            // Boebot laten draaien
            RobotMain.sLinks.update(1500 + turningSpeed);
            RobotMain.sRechts.update(1500 + turningSpeed);
            // Boebot de berekende tijd laten wachten
            BoeBot.wait(timePerDegree * degrees);

            // Boebot stoppen
            emergencyBrake();
        } else if (turningSpeed < 0) {
            // Negatieve snelheid omdraaien naar positieve snelheid
            turningSpeed = Math.abs(turningSpeed);

            // Tijd om te draaien bereken
            int timePerDegree = 400 / turningSpeed;

            // Boebot laten draaien
            RobotMain.sLinks.update(1500 - turningSpeed);
            RobotMain.sRechts.update(1500 - turningSpeed);
            // Boebot de berekende tijd laten wachten
            BoeBot.wait(timePerDegree * degrees);

            // Boebot stoppen
            emergencyBrake();
        }
    }

    public static void emergencyBrake() {
        // Boebot stil laten staan
        RobotMain.sLinks.update(1500);
        RobotMain.sRechts.update(1500);

        BoeBot.wait(1000);
    }
}
